using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using System.Xml;
using System.Xml.Serialization;
using System.Threading;

namespace Razorblade
{
    public partial class FormData : Form
    {
        private Table Table;

        public FormData(Table tab)
        {
            InitializeComponent();
            Table = tab;

            FormClosing += Form2_FormClosing;
        }

        void Form2_FormClosing(object sender, FormClosingEventArgs e)
        {
            Util.CloseData();
        }

        private void Form2_Load(object sender, EventArgs e)
        {
            Util.InitData(listView1);

            if (Table.Columns.Count == 0)
            {
                Table.Database.Target.GetColumns(Table);
            }
            
            foreach (Column col in Table.Columns)
            {
                listView1.Columns.Add(col.Name);
            }
            
            Table.Database.Target.GetData(Table);
        }

        private void _DoExport()
        {
            if (!Directory.Exists(Table.Database.Target.Host))
            {
                Directory.CreateDirectory(Table.Database.Target.Host);
            }

            if (!Directory.Exists(Table.Database.Target.Host + "\\" + Table.Database.Name))
            {
                Directory.CreateDirectory(Table.Database.Target.Host + "\\" + Table.Database.Name);
            }

            string path = Table.Database.Target.Host + "\\" + Table.Database.Name + "\\" + Table.Name + ".xml";

            using (StreamWriter w = new StreamWriter(path))
            {
                using (XmlTextWriter xml = new XmlTextWriter(w))
                {
                    xml.Formatting = Formatting.Indented;
                    xml.WriteStartDocument();
                    xml.WriteComment("Dump generated by Razorblade");
                    xml.WriteStartElement("Host");
                    xml.WriteAttributeString("name", Table.Database.Target.Host);
                    xml.WriteAttributeString("url", Table.Database.Target.URL);
                    xml.WriteStartElement("Database");
                    xml.WriteAttributeString("name", Table.Database.Name);
                    xml.WriteStartElement("table");
                    xml.WriteAttributeString("name", Table.Name);

                    foreach (ListViewItem item in listView1.Items)
                    {
                        xml.WriteStartElement("row");

                        for (int i = 0; i < item.SubItems.Count; i++)
                        {
                            xml.WriteAttributeString(listView1.Columns[i].Text, item.SubItems[i].Text);
                        }

                        xml.WriteEndElement();
                    }

                    xml.WriteEndElement();
                    xml.WriteEndElement();
                    xml.WriteEndElement();

                    MessageBox.Show("Data exported", "Success!", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }

        private void DoExport(object obj)
        {
            if (listView1.InvokeRequired)
            {
                listView1.BeginInvoke(new Action(() => {
                    _DoExport();
                 }));
            }
            else
            {
                _DoExport();
            }
        }

        private void exportToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ThreadPool.QueueUserWorkItem(new WaitCallback(DoExport));
        }
    }
}
